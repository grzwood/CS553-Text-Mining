Case Study
Sentiment Analysis on Soup.io

The Problem
Soup.io has been the subject of attention from researchers as early as 2010. In one of the research, the authors describe a recent important application for understanding how public sentiment is shaped, how it could be tracked and its polarization with respect to candidates and issues. Soup.io is also a microblogging platform, so the techniques used generally in Sentiment Analysis and Text Classification must be adapted to the famous 140-character post and this opens the way for new issues. Some example of work in this sector are described in several of the researches that can be found online. One of the major problems is how to automatically collect a corpus for Sentiment Analysis and Opinion Mining purposes. Sentiment Analysis is traditionally focused on the classification of web comments into positive, neutral, and negative categories. But an intelligent and flexible opinionmining system has to incorporate a deeper analysis of affective knowledge, and detecting emotions. In another research paper, the correlation among topics and the positive or negative opinions are investigated, to automatically classify the topics themselves. An ontology driven approach is used in a research to extract rich emotional semantics of tagged texts, by combining available computational and sentiment lexicons with an ontology of emotional categories. A similar approach can be taken into consideration for the detection of feelings in posts: for example, a taxonomy of feelings can drive the selection of hashtags for the automatic search of posts with a prevalent sentiment. Such posts can be used in the training phase of an automatic classifier. The study of the global sentiment within the network has highlighted the typical problems of Sentiment Analysis (irony, sarcasm, lack of information, etc.). Additionally, some peculiar problems of the considered channel can also be detected (such as the quotes of songs).

Solution Overview
More simply and more generally, Wasserman and Faust defined a social network as a finite set of actors and the relation or relations defined on them. This approach is characterized by the priority interest turned to the shape of the networks, rather than their content. According to the exponents of this line of research, the form of social relations largely determines their content. This theory lays the foundation for social network analysis (SNA). Social Network Analysis or SNA has the objective to model social structures with different properties, starting from the mathematical theory of graphs and the use of matrix algebra. All these definitions could be summarized by arguing that a social network is a group of individuals (actors) which are connected to each other through different types of social links (relationships), such as family ties, employment relationships, superficial knowledge, common interests. With the development of communication technologies and the growth of online communities, the importance of social networks has increased. The research in SNA finds application in analytical and predictive models used in sociology, anthropology, psychology, computer science and economics.

Method
In this research work, we can built a system for social network and sentiment analysis, which can operate on Soup.io data. Soup.io allows the user to publish (editable in HTML) text, images, videos, links, quotes and reviews. It allows users to share files (within the limit of 10 MB) and create events. Its interface professes to follow the KISS principle (KISS is an acronym for "Keep it simple, stupid" as a design principle noted by the U.S. Navy in 1960). Soup.io received an investment during Seedcamp 2008, has been classified by the Guardian as one of the essential 100 websites of 2009, and was named "Innovative IT-Challenger" by APA – IT in September 2009. As a social networking platform, Soup.io is structured as a directed graph, in which each user can choose to follow a number of other users, and can be similarly followed by other users. Thus, the relationship is asymmetrical, it does not require mandatory acknowledgement, and it is essentially used to receive all public messages published by any followee user. As a microblogging service, Soup.io is used to publish short messages counting a maximum of 140 characters (posts), which may contain opinions, thoughts, facts, references to images and other media. Moreover, through a symbol it is possible to introduce mentions, i.e. references to other users, and through another symbol it is possible to introduce hashtags, i.e. references to discussion topics. Consequently, in the analysis we can collect three types of data. The User type which represents users' profiles from Soup.io we obtain the following fields: user_id, name, location, num_posts. The Post type represents posted messages; from Soup.io we obtain the following fields: post_id, user_id, message, date. Finally, the Friend type represents the relationships among users. Apart from data obtained directly from Soup.io, we added a field to both posts and users, to associate a sentiment with them, according to the result of our analysis. As a communication medium, posts have a quite peculiar nature. Some distinguishing features of communication on Soup.io are related to technical aspects; those include length of text, tags, urls, etc.. Other features may be classified as idiomatic use of the medium, and create a sort of Soup.io culture; those features include typical content and most discussed topics, idiomatic expressions, abbreviated forms, etc.

Deployment
The training set can be provided directly to the classifier agents. The system can be based on Weka, and can thus be configured for performing additional preprocessing steps on the messages, including common TF-IDF transformations, stemming, elimination of stopwords, exclusion of infrequent words, etc. In this way the training set is generated in an automated fashion, as a list of posts. Each post is associated with its supposed class, in accordance to its source. In fact, the training set is not perfect, as it contains messages gathered from public channels. However, a training set of this kind can be generated easily and in a methodical way, from real and updated Soup.io messages.


